### This file was generated by Nexus Schema
### Do not make changes to this file directly


type basicUserInfoAndAccessToken {
  """jwt access token please store in authorization header at every request"""
  accessToken: String!

  """email of the user"""
  email: String!

  """Full name of the user"""
  fullName: String!
}

type Comment {
  """author of the comment"""
  author: User!

  """id of the comment"""
  id: ID!

  """post in which comments belong to"""
  post: Post!

  """text of the comment"""
  text: String!
}

type CommentSubscriptionType {
  comment: Comment!
  variant: MutationType!
}

input createComment {
  """postId of the comment"""
  postId: String!

  """text of the comment"""
  text: String!
}

input createPost {
  """body of the post"""
  body: String!

  """is it published or not"""
  published: Boolean! = false

  """title of the post"""
  title: String!
}

input createUser {
  email: String!
  fullName: String!

  """password of the user"""
  password: String!
}

input deleteComment {
  """id of the comment"""
  id: ID!

  """postId of the comment"""
  postId: ID!
}

type Mutation {
  createComment(data: createComment!): Comment!
  createPost(data: createPost!): Post!
  createUser(data: createUser!): basicUserInfoAndAccessToken!
  deleteComment(data: deleteComment!): Comment
  deletePost(
    """id of the post you want to delete"""
    id: String!
  ): Post
  deleteUser: User
  updateComment(data: updateComment!): Comment
  updatePost(data: updatePost!): Post
  updateUser(data: updateUser!): basicUserInfoAndAccessToken
}

"""tells us about which type of mutation is happening in subscribtion"""
enum MutationType {
  CREATE
  DELETE
  UPDATE
}

type Post {
  """author of the post"""
  author: User!

  """body of the post"""
  body: String!
  comments: [Comment!]!

  """id of the post"""
  id: ID!

  """returns true if it posts otherwise it returns false"""
  published: Boolean!

  """title of the post"""
  title: String!
}

type Query {
  comment: [Comment!]!
  currentUser: User
  greeting(
    """name you want in string"""
    name: String! = "pranshu"
  ): String!
  post(
    """search the posts by title or body"""
    searchByNameOrBody: String
  ): [Post!]!
  users(
    """search the users by the name"""
    searchByName: String
  ): [User!]!
}

type Subscription {
  getCommentsByPost(
    """id of the post you want to subscribe."""
    postId: ID!
  ): CommentSubscriptionType!
  getNewUsers: User!
}

input updateComment {
  """id of the comment"""
  id: ID!

  """postId of the comment"""
  postId: ID!

  """text of the comment"""
  text: String!
}

input updatePost {
  """body of the post"""
  body: String

  """id of the post"""
  id: ID!

  """returns true if it posts otherwise it returns false"""
  published: Boolean

  """title of the post"""
  title: String
}

input updateUser {
  """email of the user"""
  email: String

  """Full name of the user"""
  fullName: String
}

type User {
  comments: [Comment!]!

  """email of the user"""
  email: String!

  """Full name of the user"""
  fullName: String!

  """Id of the user"""
  id: ID!
  posts: [Post!]!
}
