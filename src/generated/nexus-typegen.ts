/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as swapi from "./../types/backingTypes"
import { ContextType } from "./../types/backingTypes"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  createComment: { // input type
    postId: string; // String!
    text: string; // String!
  }
  createPost: { // input type
    body: string; // String!
    published: boolean; // Boolean!
    title: string; // String!
  }
  createUser: { // input type
    email: string; // String!
    fullName: string; // String!
    password: string; // String!
  }
  deleteComment: { // input type
    id: string; // ID!
    postId: string; // ID!
  }
  loginUser: { // input type
    email: string; // String!
    password: string; // String!
  }
  updateComment: { // input type
    id: string; // ID!
    postId: string; // ID!
    text: string; // String!
  }
  updatePost: { // input type
    body?: string | null; // String
    id: string; // ID!
    published?: boolean | null; // Boolean
    title?: string | null; // String
  }
  updateUser: { // input type
    email?: string | null; // String
    fullName?: string | null; // String
  }
}

export interface NexusGenEnums {
  MutationType: 0 | 2 | 1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Comment: swapi.Comment;
  CommentSubscriptionType: { // root type
    comment: NexusGenRootTypes['Comment']; // Comment!
    variant: NexusGenEnums['MutationType']; // MutationType!
  }
  Mutation: {};
  Post: swapi.Post;
  Query: {};
  Subscription: {};
  User: swapi.User;
  basicUserInfoAndAccessToken: { // root type
    accessToken: string; // String!
    email: string; // String!
    fullName: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Comment: { // field return type
    author: NexusGenRootTypes['User']; // User!
    id: string; // ID!
    post: NexusGenRootTypes['Post']; // Post!
    text: string; // String!
  }
  CommentSubscriptionType: { // field return type
    comment: NexusGenRootTypes['Comment']; // Comment!
    variant: NexusGenEnums['MutationType']; // MutationType!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment']; // Comment!
    createPost: NexusGenRootTypes['Post']; // Post!
    createUser: NexusGenRootTypes['basicUserInfoAndAccessToken']; // basicUserInfoAndAccessToken!
    deleteComment: NexusGenRootTypes['Comment'] | null; // Comment
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    deleteUser: NexusGenRootTypes['User'] | null; // User
    loginUserMutation: NexusGenRootTypes['basicUserInfoAndAccessToken']; // basicUserInfoAndAccessToken!
    logOutUserMutation: boolean | null; // Boolean
    updateComment: NexusGenRootTypes['Comment'] | null; // Comment
    updatePost: NexusGenRootTypes['Post'] | null; // Post
    updateUser: NexusGenRootTypes['basicUserInfoAndAccessToken'] | null; // basicUserInfoAndAccessToken
  }
  Post: { // field return type
    author: NexusGenRootTypes['User']; // User!
    body: string; // String!
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    id: string; // ID!
    published: boolean; // Boolean!
    title: string; // String!
  }
  Query: { // field return type
    comment: NexusGenRootTypes['Comment'][]; // [Comment!]!
    currentUser: NexusGenRootTypes['User'] | null; // User
    post: NexusGenRootTypes['Post'][]; // [Post!]!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Subscription: { // field return type
    getCommentsByPost: NexusGenRootTypes['CommentSubscriptionType']; // CommentSubscriptionType!
    getNewUsers: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    email: string; // String!
    fullName: string; // String!
    id: string; // ID!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
  basicUserInfoAndAccessToken: { // field return type
    accessToken: string; // String!
    email: string; // String!
    fullName: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    author: 'User'
    id: 'ID'
    post: 'Post'
    text: 'String'
  }
  CommentSubscriptionType: { // field return type name
    comment: 'Comment'
    variant: 'MutationType'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createPost: 'Post'
    createUser: 'basicUserInfoAndAccessToken'
    deleteComment: 'Comment'
    deletePost: 'Post'
    deleteUser: 'User'
    loginUserMutation: 'basicUserInfoAndAccessToken'
    logOutUserMutation: 'Boolean'
    updateComment: 'Comment'
    updatePost: 'Post'
    updateUser: 'basicUserInfoAndAccessToken'
  }
  Post: { // field return type name
    author: 'User'
    body: 'String'
    comments: 'Comment'
    id: 'ID'
    published: 'Boolean'
    title: 'String'
  }
  Query: { // field return type name
    comment: 'Comment'
    currentUser: 'User'
    post: 'Post'
    users: 'User'
  }
  Subscription: { // field return type name
    getCommentsByPost: 'CommentSubscriptionType'
    getNewUsers: 'User'
  }
  User: { // field return type name
    comments: 'Comment'
    email: 'String'
    fullName: 'String'
    id: 'ID'
    posts: 'Post'
  }
  basicUserInfoAndAccessToken: { // field return type name
    accessToken: 'String'
    email: 'String'
    fullName: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      data: NexusGenInputs['createComment']; // createComment!
    }
    createPost: { // args
      data: NexusGenInputs['createPost']; // createPost!
    }
    createUser: { // args
      data: NexusGenInputs['createUser']; // createUser!
    }
    deleteComment: { // args
      data: NexusGenInputs['deleteComment']; // deleteComment!
    }
    deletePost: { // args
      id: string; // String!
    }
    loginUserMutation: { // args
      data: NexusGenInputs['loginUser']; // loginUser!
    }
    updateComment: { // args
      data: NexusGenInputs['updateComment']; // updateComment!
    }
    updatePost: { // args
      data: NexusGenInputs['updatePost']; // updatePost!
    }
    updateUser: { // args
      data: NexusGenInputs['updateUser']; // updateUser!
    }
  }
  Query: {
    post: { // args
      searchByNameOrBody?: string | null; // String
    }
    users: { // args
      searchByName?: string | null; // String
    }
  }
  Subscription: {
    getCommentsByPost: { // args
      postId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ContextType;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}